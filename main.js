!function(){"use strict";document.querySelectorAll(".popup"),document.querySelector(".popup__form");const e=document.querySelector(".elements"),t=(document.querySelector("#card-template").content.querySelector(".element"),document.querySelector(".profile__edit-button")),s=document.querySelector(".profile__add-button"),i=document.querySelector(".popup_type_edit-profile"),n=i.querySelector(".popup__input_type_name"),r=i.querySelector(".popup__input_type_description"),o=document.querySelector(".popup_type_avatar-change"),a=document.querySelector(".profile__image"),l=document.querySelector(".popup_type_add-card"),c=document.querySelector(".popup_type-preview"),h=(c.querySelector(".popup__image"),c.querySelector(".popup__subtitle"),{formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"});function d(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class _{constructor(e){let{data:t,userId:s,templateCardSelector:i,handleCardClick:n,activateLikeButton:r,handleDeleteClick:o}=e;d(this,"_setEventListeners",(()=>{this._likeButton.addEventListener("click",(()=>this._activateLikeButton())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteClick(this))),this._cardImage.addEventListener("click",(()=>this._handleCardClick(this._text,this._link)))})),d(this,"getCardElement",(()=>{this._card=this._cardTemplate.cloneNode(!0),this._likeButton=this._card.querySelector(".element__button-like"),this._deleteButton=this._card.querySelector(".element__button-delete"),this._cardImage=this._card.querySelector(".element__image");const e=this._card.querySelector(".element__title");return this._likesCounter=this._card.querySelector(".element__likes-count"),e.textContent=this._text,this._cardImage.src=this._link,this._cardImage.alt=this._text,this._setEventListeners(),this.setLikes(this._likes),this._userId!==this._ownerId&&(this._likeButton.style.display="none"),this._card})),this._text=t.name,this._link=t.link,this._likes=t.likes,this._id=t._id,this._userId=s,this._ownerId=t.owner._id,this._templateCardSelector=i,this._handleCardClick=n,this._activateLikeButton=r,this._handleDeleteClick=o,this._cardTemplate=document.querySelector(i).content.querySelector(".element")}getId(){return this._id}removeCard(){this._card.remove(),this._card=null}setLikes(e){this._likes=e,this._card.querySelector(".element__likes-count").textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("element__button-like_active"):this._likeButton.classList.remove("element__button-like_active")}isLiked(){return this._likes.find((e=>e._id===this._userId))}}function u(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var p=class{constructor(e,t){u(this,"_showInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,i=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(t),i.textContent=e.validationMessage,i.classList.add(s)})),u(this,"_hideInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,i=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(t),i.textContent="",i.classList.remove(s)})),u(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,this._settings)})),u(this,"_hasInvalidInput",(()=>this._inputList.every((e=>e.validity.valid)))),u(this,"toggleButtonState",(()=>{this._hasInvalidInput()?this._enableButton():this.disableButton()})),u(this,"_setEventListeners",(()=>{const{inputSelector:e}=this._settings;this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))})),this._settings=e,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}disableButton(){const{inactiveButtonClass:e}=this._settings;this._buttonElement.disabled=!0,this._buttonElement.classList.add(e)}_enableButton(){const{inactiveButtonClass:e}=this._settings;this._buttonElement.disabled=!1,this._buttonElement.classList.remove(e)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class m{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup__opened"),this.addKeyDownListener()}addKeyDownListener(){window.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup__opened"),this.removeKeyDownListener()}removeKeyDownListener(){window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.matches(".popup")||e.target.matches(".popup__close"))&&this.close()}))}}class v extends m{constructor(e,t){super(e),this._handlerSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._submitButton=this._form.querySelector(".popup__save"),this._initialButtonText=this._submitButton.textContent,this._inputs=[...this._form.querySelectorAll(".popup__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.name,i=t.value;e[s]=i})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handlerSubmit(this._getInputValues())}))}changeSubmitHandler(e){this._handlerSubmit=e}changeText(e){this._submitButton.textContent=e}close(){super.close(),this._form.reset()}}const y=new class{constructor(e){var t,s;s=e=>e.ok?e.json():Promise.reject(e.statusText),(t="_checkResponse")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(this._checkResponse)}getCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(this._checkResponse)}editProfile(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}editAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"4cdae314-7e8a-4bed-8ada-70ad33c12e13","Content-Type":"application/json"}}),g=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(s),this._avatarPic=document.querySelector(i)}getUserInfo(){return{name:this._userName.textContent,description:this._userDescription.textContent}}setUserInfo(e,t,s){this._userName.textContent=e,this._userDescription.textContent=t}setUserAvatar(e){this._avatarPic.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"});let k;Promise.all([y.getUserInfo(),y.getCards()]).then((e=>{let[t,s]=e;k=t._id,g.setUserInfo(t.name,t.about,t.avatar),x.renderItems(s)})).catch(console.log);const b=new p(h,i),f=new p(h,l),S=new p(h,o);b.enableValidation(),f.enableValidation(),S.enableValidation();const E=new v(".popup_type_add-card",(t=>{E.changeText("saving..."),y.addCard(t["card-title"],t["card-link"]).then((t=>{B(t,e)})).then((()=>{E.close()})).catch((e=>{console.log(e)})).finally((()=>{E.changeText("Create")}))}));E.setEventListeners();const L=new v(".popup_type_avatar-change",(e=>{L.changeText("saving..."),y.editAvatar(e["card-link"]).then((e=>{g.setUserAvatar(e.avatar)})).then((()=>{L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.changeText("Save")}))}));L.setEventListeners();const C=new v(".popup_type_confirm-delete");C.setEventListeners();const q=new v(".popup_type_edit-profile",(e=>{q.changeText("saving..."),y.editProfile(e.Name,e.description).then((e=>{g.setUserInfo(e.name,e.about,e.avatar)})).then((()=>{q.close()})).catch((e=>{console.log(e)})).finally((()=>{q.changeText("Save")}))}));q.setEventListeners();const I=new class extends m{constructor(e){super(e),this._caption=this._popup.querySelector(".popup__subtitle"),this._image=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._caption.textContent=e,this._image.src=t,this._image.alt=" image of ".concat(e)}}(".popup_type-preview");I.setEventListeners();const w=e=>{C.open(),C.changeSubmitHandler((()=>{C.changeText("deleting..."),y.deleteCard(e.getId()).then((()=>{e.removeCard()})).then((()=>{C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.changeText("Yes")}))}))},B=e=>{const t=new _({data:e,userId:k,templateCardSelector:"#card-template",handleCardClick:()=>(e=>{I.open(e.name,e.link)})(e),activateLikeButton:()=>(e=>{e.isLiked()?y.removeLike(e.getId()).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.log(e)})):y.addLike(e.getId()).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.log(e)}))})(t),handleDeleteClick:w});x.addItem(t.getCardElement())},x=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:B},".elements");t.addEventListener("click",(function(){!function(){const e=g.getUserInfo();n.value=e.name,r.value=e.description}(),q.open()})),s.addEventListener("click",(function(){f.disableButton(),E.open()})),a.addEventListener("click",(function(){S.disableButton(),L.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,