!function(){"use strict";document.querySelectorAll(".popup"),document.querySelector(".popup__form");const e=document.querySelector(".elements"),t=(document.querySelector("#card-template").content.querySelector(".element"),document.querySelector(".profile__edit-button")),s=document.querySelector(".profile__add-button"),n=document.querySelector(".popup_type_edit-profile"),i=n.querySelector(".popup__input_type_name"),r=n.querySelector(".popup__input_type_description"),o=document.querySelector(".popup_type_avatar-change"),a=document.querySelector(".profile__image"),l=document.querySelector(".popup_type_add-card"),c=document.querySelector(".popup_type-preview"),d=(c.querySelector(".popup__image"),c.querySelector(".popup__subtitle"),{formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"});function h(e){if("Escape"===e.key){const e=document.querySelector(".popup__opened");e&&(e.classList.remove("popup__opened"),window.removeEventListener("keydown",h))}}function u(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class _{constructor(e){let{data:t,userId:s,templateCardSelector:n,handleCardClick:i,activateLikeButton:r,handleDeleteClick:o}=e;u(this,"_openImagePreview",(()=>{popupImage.src=this._link,popupImage.alt=this._text,popupTitle.textContent=this._text,popupImagePreview.classList.add("popup__opened"),window.addEventListener("keydown",h)})),u(this,"_setEventListeners",(()=>{this._likeButton.addEventListener("click",(()=>this._activateLikeButton())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteClick(this))),this._cardImage.addEventListener("click",(()=>this._handleCardClick(this._text,this._link)))})),u(this,"getCardElement",(()=>(this._card=this._cardTemplate.cloneNode(!0),this._likeButton=this._card.querySelector(".element__button-like"),this._deleteButton=this._card.querySelector(".element__button-delete"),this._cardImage=this._card.querySelector(".element__image"),this._card.querySelector(".element__title").textContent=this._text,this._cardImage.src=this._link,this._cardImage.alt=this._text,this._setEventListeners(),this.setLikes(this._likes),this._userId!==this._ownerId&&(this._card.querySelector(".element__button-delete").style.display="none"),this._card))),this._text=t.name,this._link=t.link,this._likes=t.likes,this._id=t._id,this._userId=s,this._ownerId=t.owner._id,this._templateCardSelector=n,this._handleCardClick=i,this._activateLikeButton=r,this._handleDeleteClick=o,this._cardTemplate=document.querySelector(n).content.querySelector(".element")}getId(){return this._id}removeCard(){this._card.remove(),this._card=null}setLikes(e){this._likes=e;const t=this._likes.length;this._card.querySelector(".element__likes-count").textContent=t,this.isLiked()?this._likeButton.classList.add("element__button-like_active"):this._likeButton.classList.remove("element__button-like_active")}isLiked(){return this._likes.find((e=>e._id===this._userId))}}function p(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var m=class{constructor(e,t){p(this,"_showInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(t),n.textContent=e.validationMessage,n.classList.add(s)})),p(this,"_hideInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(t),n.textContent="",n.classList.remove(s)})),p(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,this._settings)})),p(this,"_hasInvalidInput",(()=>this._inputList.every((e=>e.validity.valid)))),p(this,"toggleButtonState",(()=>{this._hasInvalidInput()?this._enableButton():this.disableButton()})),p(this,"_setEventListeners",(()=>{const{inputSelector:e}=this._settings;this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))})),this._settings=e,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}disableButton(){const{inactiveButtonClass:e}=this._settings;this._buttonElement.disabled=!0,this._buttonElement.classList.add(e)}_enableButton(){const{inactiveButtonClass:e}=this._settings;this._buttonElement.disabled=!1,this._buttonElement.classList.remove(e)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class v{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup__opened"),this.addKeyDownListener()}addKeyDownListener(){window.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup__opened"),this.removeKeyDownListener()}removeKeyDownListener(){window.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.matches(".popup")||e.target.matches(".popup__close"))&&this.close()}))}}class y extends v{constructor(e,t){super(e),this._handlerSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._submitButton=this._form.querySelector(".popup__save"),this._initialButtonText=this._submitButton.textContent}_getInputValues(){const e={};return[...this._form.querySelectorAll(".popup__input")].forEach((t=>{const s=t.name,n=t.value;e[s]=n})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handlerSubmit(this._getInputValues())}))}changeSubmitHandler(e){this._handlerSubmit=e}changeText(e){this._submitButton.textContent=e}close(){super.close(),this._form.reset()}}const g=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}getCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}editProfile(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}editAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"4cdae314-7e8a-4bed-8ada-70ad33c12e13","Content-Type":"application/json"}}),k=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:n}=e;this._userName=document.querySelector(t),this._userDescription=document.querySelector(s),this._avatarPic=document.querySelector(n)}getUserInfo(){return{name:this._userName.textContent,description:this._userDescription.textContent}}setUserInfo(e,t,s){this._userName.textContent=e,this._userDescription.textContent=t}setUserAvatar(e){this._avatarPic.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"});let b;Promise.all([g.getUserInfo(),g.getCards()]).then((e=>{let[t,s]=e;b=t._id,k.setUserInfo(t.name,t.about,t.avatar),B.renderItems(s)})).catch(console.log);const f=new m(d,n),S=new m(d,l),E=new m(d,o);f.enableValidation(),S.enableValidation(),E.enableValidation();const L=new y(".popup_type_add-card",(t=>{L.changeText("saving..."),g.addCard(t["card-title"],t["card-link"]).then((t=>{T(t,e),L.changeText("Create")})).catch((e=>{console.log(e)})).finally((()=>{L.close(),S.disableButton()}))}));L.setEventListeners();const C=new y(".popup_type_avatar-change",(e=>{C.changeText("saving..."),g.editAvatar(e["card-link"]).then((e=>{k.setUserAvatar(e.avatar),C.changeText("Save")})).catch((e=>{console.log(e)})).finally((()=>{C.close()}))}));C.setEventListeners();const I=new y(".popup_type_confirm-delete");I.setEventListeners();const w=new y(".popup_type_edit-profile",(e=>{w.changeText("saving..."),g.editProfile(e.Name,e.description).then((e=>{k.setUserInfo(e.name,e.about,e.avatar),w.changeText("Save"),w.close()})).catch((e=>{console.log(e)})).finally((()=>{}))}));w.setEventListeners();const q=new class extends v{open(e,t){super.open();const s=this._popup.querySelector(".popup__subtitle"),n=this._popup.querySelector(".popup__image");s.textContent=e,n.src=t,n.alt=" image of ".concat(e)}}(".popup_type-preview");q.setEventListeners();const x=e=>{I.open(),I.changeSubmitHandler((()=>{I.changeText("deleting..."),g.deleteCard(e.getId()).then((()=>{e.removeCard(),I.changeText("Yes")})).catch((e=>{console.log(e)})).finally((()=>{I.close()}))}))},T=e=>{const t=new _({data:e,userId:b,templateCardSelector:"#card-template",handleCardClick:()=>(e=>{q.open(e.name,e.link)})(e),activateLikeButton:()=>(e=>{e.isLiked()?g.removeLike(e.getId()).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.log(e)})):g.addLike(e.getId()).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.log(e)}))})(t),handleDeleteClick:x});B.addItem(t.getCardElement())},B=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:T},".elements");t.addEventListener("click",(function(){!function(){const e=k.getUserInfo();i.value=e.name,r.value=e.description}(),w.open()})),s.addEventListener("click",(function(){S.disableButton(),L.open()})),a.addEventListener("click",(function(){E.disableButton(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,